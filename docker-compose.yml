services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.build
      target: build
    volumes:
      - frontend_build:/app/dist
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=/api
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - backend_data:/app/data
      - backend_static:/app/static
    env_file:
      - ./backend/.env
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
    networks:
      - app-network

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - frontend_build:/usr/share/nginx/html
      - backend_static:/usr/share/nginx/static
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  # 可选的SSL证书自动更新服务
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    # 暂时注释掉 entrypoint，以便运行 certonly 命令
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    # entrypoint: ["tail", "-f", "/dev/null"] # This was for manual certonly

networks:
  app-network:
    driver: bridge

volumes:
  frontend_build:
  backend_data:
  backend_static:
