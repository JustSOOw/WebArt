user root; # 临时设置，仅用于 Certbot 获取证书

# 默认服务器配置
server {
    listen 80 default_server;
    server_name _;
    return 444;
}

# HTTP服务器，（首次获取证书时）不重定向到HTTPS
server {
    listen 0.0.0.0:80; # 明确监听 IPv4
    server_name furdow.com www.furdow.com; # 添加 www 子域
    
    # 静态挑战目录，用于Let's Encrypt
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # 将所有HTTP请求重定向到HTTPS (首次获取证书时注释掉)
    # location / {
    #     return 301 https://$host$request_uri;
    # }

    # （可选）添加一个临时根目录，以便在获取证书时能访问到文件
    location / {
        root /var/www/html; # 可以指向一个空的或包含简单 index.html 的目录
        index index.html index.htm;
    }
}

# HTTPS服务器 (首次获取证书时注释掉)
# server {
#    listen 0.0.0.0:443 ssl; # 明确监听 IPv4
#    server_name furdow.com www.furdow.com; # 添加 www 子域
#    
#    # SSL配置 (路径会在获取证书后生效)
#    ssl_certificate /etc/letsencrypt/live/furdow.com/fullchain.pem;
#    ssl_certificate_key /etc/letsencrypt/live/furdow.com/privkey.pem;
     # ... (其他 HTTPS 配置，保持注释状态) ...
#    ssl_protocols TLSv1.2 TLSv1.3;
#    ssl_prefer_server_ciphers on;
#    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
#    ssl_session_cache shared:SSL:10m;
#    ssl_session_timeout 1d;
#    ssl_stapling on;
#    ssl_stapling_verify on;
#    
#    # 增加安全头部
#    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#    add_header X-Content-Type-Options nosniff;
#    add_header X-Frame-Options SAMEORIGIN;
#    add_header X-XSS-Protection "1; mode=block";
#    
#    # 允许跨域请求
#    add_header 'Access-Control-Allow-Origin' '*';
#    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
#    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
#    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
#    
#    # 增加上传文件大小限制
#    client_max_body_size 100M;
#    
#    # 静态文件访问 - 直接访问后端静态文件
#    location /static/ {
#        alias /usr/share/nginx/static/;
#        expires 30d;
#        add_header Cache-Control "public, no-transform";
#    }
#    
#    # 前端静态文件服务
#    location / {
#        root /usr/share/nginx/html;
#        try_files $uri $uri/ /index.html;
#        expires 7d;
#        add_header Cache-Control "public, no-transform";
#    }
#    
#    # 标准API请求 - 使用适当的超时设置
#    location ~ ^/api/chat/completions {
#        proxy_pass http://backend:5000;
#        proxy_set_header Host $host;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#        
#        # 为AI生成设置合理的超时
#        proxy_connect_timeout 90s;
#        proxy_send_timeout 90s;
#        proxy_read_timeout 300s;
#        
#        # 流式输出设置
#        proxy_buffering off;
#        proxy_cache off;
#    }
#    
#    # 文件上传路由 - 使用更长的超时
#    location ~ ^/api/chat/upload {
#        proxy_pass http://backend:5000;
#        proxy_set_header Host $host;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#        
#        # 增加上传文件超时设置
#        proxy_connect_timeout 600s;
#        proxy_send_timeout 600s;
#        proxy_read_timeout 600s;
#        
#        # 允许上传文件
#        proxy_request_buffering off;
#        client_max_body_size 100M;
#        
#        # 增加缓冲区大小，避免大文件处理问题
#        proxy_buffers 8 32k;
#        proxy_buffer_size 64k;
#    }
#    
#    # 其他API路由
#    location /api {
#        proxy_pass http://backend:5000;
#        proxy_set_header Host $host;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#        
#        # 标准超时设置
#        proxy_connect_timeout 60s;
#        proxy_send_timeout 60s;
#        proxy_read_timeout 60s;
#    }
# }